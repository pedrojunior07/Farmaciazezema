---
import { getEntry } from "astro:content";
import Alert from "../components/Alert.astro";
import Guide from "../components/Guide.astro";
import Layout from "../components/Layout.astro";
import { supabase } from "../utils/database";

// Tipos explícitos
interface Cliente {
  id: number;
  nome: string;
  telefone: string;
  endereco: string;
  nuit: string;
  created_at: string;
}

interface Produto {
  id: number;
  nome: string;
  preco: number;
  quantidade: number;
  categoria: string;
  fabricante: string;
}

interface Venda {
  id: number;
  cliente_id: number;
  data_venda: string;
  valor_total: number;
}

interface Usuario {
  id: number;
  nome: string;
}

interface ItemVenda {
  id: number;
  venda_id: number;
  produto_id: number;
  quantidade: number;
}

// Declaração das variáveis com tipos
let clientes: Cliente[] = [];
let produtos: Produto[] = [];
let vendas: Venda[] = [];
let itensVenda: ItemVenda[] = [];
let usuarios: Usuario[] = [];
let dbError: any = null;

export const prerender = false;

// Busca os dados do Supabase
if (supabase) {
  try {
    const [
      { data: clientesData, error: clientesError },
      { data: produtosData, error: produtosError },
      { data: vendasData, error: vendasError },
      { data: itensVendaData, error: itensVendaError },
      { data: usuariosData, error: usuariosError }
    ] = await Promise.all([
      supabase.from<Cliente>("clientes").select("*").order("created_at", { ascending: false }),
      supabase.from<Produto>("produtos").select("*").order("created_at", { ascending: false }),
      supabase.from<Venda>("vendas").select("*").order("data_venda", { ascending: false }),
      supabase.from<ItemVenda>("itens_venda").select("*"),
      supabase.from<Usuario>("usuarios").select("*")
    ]);

    clientes = clientesData || [];
    produtos = produtosData || [];
    vendas = vendasData || [];
    itensVenda = itensVendaData || [];
    usuarios = usuariosData || [];

    dbError = clientesError || produtosError || vendasError || itensVendaError || usuariosError;

  } catch (error) {
    dbError = error;
  }
}

// Carrega os guias
const connectGuide = await getEntry("guides", "guide-connect-supabase");
const fetchDataGuide = await getEntry("guides", "guide-fetch-data");
---

<Layout title="Sistema de Vendas">
  {
    supabase ? (
      !dbError ? (
        <div class="grid grid-cols-1 gap-8">
          
          <!-- Clientes -->
          <section>
            <h2 class="mb-4 text-2xl font-bold">Clientes</h2>
            <div class="overflow-x-auto">
              <table class="w-full text-left border-collapse">
                <thead>
                  <tr class="font-mono text-base border-t border-b">
                    <th class="p-2">Nome</th>
                    <th class="p-2">Telefone</th>
                    <th class="p-2">Endereço</th>
                    <th class="p-2">NUIT</th>
                    <th class="p-2">Data Cadastro</th>
                  </tr>
                </thead>
                <tbody>
                  {clientes.map((cliente) => (
                    <tr key={cliente.id} class="border-b hover:bg-gray-50">
                      <td class="p-2">{cliente.nome}</td>
                      <td class="p-2">{cliente.telefone}</td>
                      <td class="p-2">{cliente.endereco}</td>
                      <td class="p-2">{cliente.nuit}</td>
                      <td class="p-2">{new Date(cliente.created_at).toLocaleDateString()}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </section>

          <!-- Produtos -->
          <section>
            <h2 class="mb-4 text-2xl font-bold">Produtos</h2>
            <div class="overflow-x-auto">
              <table class="w-full text-left border-collapse">
                <thead>
                  <tr class="font-mono text-base border-t border-b">
                    <th class="p-2">Nome</th>
                    <th class="p-2">Preço</th>
                    <th class="p-2">Quantidade</th>
                    <th class="p-2">Categoria</th>
                    <th class="p-2">Fabricante</th>
                  </tr>
                </thead>
                <tbody>
                  {produtos.map((produto) => (
                    <tr key={produto.id} class="border-b hover:bg-gray-50">
                      <td class="p-2">{produto.nome}</td>
                      <td class="p-2">{produto.preco.toFixed(2)}</td>
                      <td class="p-2">{produto.quantidade}</td>
                      <td class="p-2">{produto.categoria}</td>
                      <td class="p-2">{produto.fabricante}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </section>

          <!-- Vendas -->
          <section>
            <h2 class="mb-4 text-2xl font-bold">Vendas</h2>
            <div class="overflow-x-auto">
              <table class="w-full text-left border-collapse">
                <thead>
                  <tr class="font-mono text-base border-t border-b">
                    <th class="p-2">ID</th>
                    <th class="p-2">Cliente</th>
                    <th class="p-2">Data</th>
                    <th class="p-2">Valor Total</th>
                  </tr>
                </thead>
                <tbody>
                  {vendas.map((venda) => {
                    const cliente = clientes.find(c => c.id === venda.cliente_id);
                    return (
                      <tr key={venda.id} class="border-b hover:bg-gray-50">
                        <td class="p-2">{venda.id}</td>
                        <td class="p-2">{cliente ? cliente.nome : 'Cliente não encontrado'}</td>
                        <td class="p-2">{new Date(venda.data_venda).toLocaleString()}</td>
                        <td class="p-2">{venda.valor_total.toFixed(2)}</td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </section>
        </div>
      ) : (
        <>
          <Alert
            title="Erro no Banco de Dados"
            text={dbError?.message || 'Erro desconhecido.'}
            variant="error"
          />
          {fetchDataGuide && <Guide guide={fetchDataGuide} />}
        </>
      )
    ) : (
      <>
        <Alert
          title="Configure seu banco de dados"
          text="Antes de continuar, você precisa completar os passos do guia abaixo para criar, popular e conectar seu banco de dados Supabase."
        />
        {connectGuide && <Guide guide={connectGuide} />}
      </>
    )
  }
</Layout>
